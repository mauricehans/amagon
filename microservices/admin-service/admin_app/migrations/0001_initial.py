# Generated by Django 5.0.1 on 2025-07-06 18:37

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdminDashboardStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('total_tickets', models.IntegerField(default=0)),
                ('open_tickets', models.IntegerField(default=0)),
                ('resolved_tickets', models.IntegerField(default=0)),
                ('avg_resolution_time', models.FloatField(default=0)),
                ('new_users', models.IntegerField(default=0)),
                ('new_sellers', models.IntegerField(default=0)),
                ('total_users', models.IntegerField(default=0)),
                ('total_sellers', models.IntegerField(default=0)),
                ('total_orders', models.IntegerField(default=0)),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'admin_dashboard_stats',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(default='admin', max_length=50)),
                ('department', models.CharField(blank=True, max_length=100)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('is_super_admin', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'admin_users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SupportTicket',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ticket_number', models.CharField(max_length=20, unique=True)),
                ('requester_type', models.CharField(choices=[('user', 'Utilisateur'), ('seller', 'Vendeur')], max_length=10)),
                ('requester_id', models.UUIDField()),
                ('requester_email', models.EmailField(max_length=254)),
                ('requester_name', models.CharField(max_length=255)),
                ('subject', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('account', 'Compte'), ('payment', 'Paiement'), ('order', 'Commande'), ('product', 'Produit'), ('technical', 'Technique'), ('billing', 'Facturation'), ('other', 'Autre')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Faible'), ('medium', 'Moyenne'), ('high', 'Élevée'), ('urgent', 'Urgente')], default='medium', max_length=10)),
                ('status', models.CharField(choices=[('open', 'Ouvert'), ('in_progress', 'En cours'), ('waiting_response', 'En attente de réponse'), ('resolved', 'Résolu'), ('closed', 'Fermé')], default='open', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('attachments', models.JSONField(blank=True, default=list)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'support_tickets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketActivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('activity_type', models.CharField(choices=[('created', 'Ticket créé'), ('assigned', 'Ticket assigné'), ('status_changed', 'Statut modifié'), ('priority_changed', 'Priorité modifiée'), ('message_added', 'Message ajouté'), ('resolved', 'Ticket résolu'), ('closed', 'Ticket fermé'), ('reopened', 'Ticket rouvert')], max_length=20)),
                ('description', models.TextField()),
                ('actor_id', models.UUIDField(blank=True, null=True)),
                ('actor_name', models.CharField(max_length=255)),
                ('actor_type', models.CharField(max_length=20)),
                ('old_value', models.TextField(blank=True, null=True)),
                ('new_value', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='admin_app.supportticket')),
            ],
            options={
                'db_table': 'ticket_activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message_type', models.CharField(choices=[('user_message', 'Message utilisateur'), ('admin_response', 'Réponse admin'), ('internal_note', 'Note interne'), ('system_message', 'Message système')], max_length=20)),
                ('author_id', models.UUIDField(blank=True, null=True)),
                ('author_name', models.CharField(max_length=255)),
                ('author_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('content', models.TextField()),
                ('is_internal', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attachments', models.JSONField(blank=True, default=list)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='admin_app.supportticket')),
            ],
            options={
                'db_table': 'ticket_messages',
                'ordering': ['created_at'],
            },
        ),
    ]
